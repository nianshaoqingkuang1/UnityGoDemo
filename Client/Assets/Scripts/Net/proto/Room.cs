// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from room.proto</summary>
  public static partial class RoomReflection {

    #region Descriptor
    /// <summary>File descriptor for room.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgpyb29tLnByb3RvEgNtc2caC2xvZ2luLnByb3RvGgxjb21tb24ucHJvdG8i",
            "cAoIUm9vbURhdGESDgoGcm9vbUlkGAEgASgNEhMKC21lbWJlckNvdW50GAIg",
            "ASgNEhYKDm1lbWJlck1heENvdW50GAMgASgNEicKCnJvb21NYXN0ZXIYBCAB",
            "KAsyEy5tc2cuUGxheWVyQmFzZUluZm8iDQoLUm9vbUxpc3RSZXEiKwoLUm9v",
            "bUxpc3RSc3ASHAoFcm9vbXMYASADKAsyDS5tc2cuUm9vbURhdGEiDQoLSm9p",
            "blJvb21SZXEiUQoLSm9pblJvb21Sc3ASHQoHcnNwSGVhZBgBIAEoCzIMLm1z",
            "Zy5Sc3BIZWFkEiMKBnBsYXllchgCIAMoCzITLm1zZy5QbGF5ZXJCYXNlSW5m",
            "byIOCgxMZWF2ZVJvb21SZXEiLQoMTGVhdmVSb29tUnNwEh0KB3JzcEhlYWQY",
            "ASABKAsyDC5tc2cuUnNwSGVhZCI4ChFSb29tUGxheWVySm9pbk50ZhIjCgZw",
            "bGF5ZXIYASABKAsyEy5tc2cuUGxheWVyQmFzZUluZm8iJgoSUm9vbVBsYXll",
            "ckxlYXZlTnRmEhAKCHBsYXllcklkGAEgASgNIhQKElJvb21CYXR0bGVSZWFk",
            "eVJlcSIzChJSb29tQmF0dGxlUmVhZHlSc3ASHQoHcnNwSGVhZBgBIAEoCzIM",
            "Lm1zZy5Sc3BIZWFkIiYKElJvb21CYXR0bGVSZWFkeU50ZhIQCghwbGF5ZXJJ",
            "ZBgBIAEoDSIaChhSb29tQmF0dGxlQ2FuY2xlUmVhZHlSZXEiOQoYUm9vbUJh",
            "dHRsZUNhbmNsZVJlYWR5UnNwEh0KB3JzcEhlYWQYASABKAsyDC5tc2cuUnNw",
            "SGVhZCIsChhSb29tQmF0dGxlQ2FuY2xlUmVhZHlOdGYSEAoIcGxheWVySWQY",
            "ASABKA0iFAoSUm9vbUJhdHRsZVN0YXJ0UmVxIjMKElJvb21CYXR0bGVTdGFy",
            "dFJzcBIdCgdyc3BIZWFkGAEgASgLMgwubXNnLlJzcEhlYWQiMwoSUm9vbUJh",
            "dHRsZVN0YXJ0TnRmEh0KB3JzcEhlYWQYASABKAsyDC5tc2cuUnNwSGVhZGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Msg.LoginReflection.Descriptor, global::Msg.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomData), global::Msg.RoomData.Parser, new[]{ "RoomId", "MemberCount", "MemberMaxCount", "RoomMaster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomListReq), global::Msg.RoomListReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomListRsp), global::Msg.RoomListRsp.Parser, new[]{ "Rooms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.JoinRoomReq), global::Msg.JoinRoomReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.JoinRoomRsp), global::Msg.JoinRoomRsp.Parser, new[]{ "RspHead", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LeaveRoomReq), global::Msg.LeaveRoomReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LeaveRoomRsp), global::Msg.LeaveRoomRsp.Parser, new[]{ "RspHead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomPlayerJoinNtf), global::Msg.RoomPlayerJoinNtf.Parser, new[]{ "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomPlayerLeaveNtf), global::Msg.RoomPlayerLeaveNtf.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomBattleReadyReq), global::Msg.RoomBattleReadyReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomBattleReadyRsp), global::Msg.RoomBattleReadyRsp.Parser, new[]{ "RspHead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomBattleReadyNtf), global::Msg.RoomBattleReadyNtf.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomBattleCancleReadyReq), global::Msg.RoomBattleCancleReadyReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomBattleCancleReadyRsp), global::Msg.RoomBattleCancleReadyRsp.Parser, new[]{ "RspHead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomBattleCancleReadyNtf), global::Msg.RoomBattleCancleReadyNtf.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomBattleStartReq), global::Msg.RoomBattleStartReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomBattleStartRsp), global::Msg.RoomBattleStartRsp.Parser, new[]{ "RspHead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomBattleStartNtf), global::Msg.RoomBattleStartNtf.Parser, new[]{ "RspHead" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///房间的数据
  /// </summary>
  public sealed partial class RoomData : pb::IMessage<RoomData> {
    private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData(RoomData other) : this() {
      roomId_ = other.roomId_;
      memberCount_ = other.memberCount_;
      memberMaxCount_ = other.memberMaxCount_;
      RoomMaster = other.roomMaster_ != null ? other.RoomMaster.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData Clone() {
      return new RoomData(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private uint roomId_;
    /// <summary>
    ///房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 2;
    private uint memberCount_;
    /// <summary>
    ///房间人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "memberMaxCount" field.</summary>
    public const int MemberMaxCountFieldNumber = 3;
    private uint memberMaxCount_;
    /// <summary>
    ///房间最大人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberMaxCount {
      get { return memberMaxCount_; }
      set {
        memberMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "roomMaster" field.</summary>
    public const int RoomMasterFieldNumber = 4;
    private global::Msg.PlayerBaseInfo roomMaster_;
    /// <summary>
    ///房主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.PlayerBaseInfo RoomMaster {
      get { return roomMaster_; }
      set {
        roomMaster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (MemberCount != other.MemberCount) return false;
      if (MemberMaxCount != other.MemberMaxCount) return false;
      if (!object.Equals(RoomMaster, other.RoomMaster)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (MemberMaxCount != 0) hash ^= MemberMaxCount.GetHashCode();
      if (roomMaster_ != null) hash ^= RoomMaster.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MemberCount);
      }
      if (MemberMaxCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MemberMaxCount);
      }
      if (roomMaster_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoomMaster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      if (MemberMaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberMaxCount);
      }
      if (roomMaster_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomMaster);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomData other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      if (other.MemberMaxCount != 0) {
        MemberMaxCount = other.MemberMaxCount;
      }
      if (other.roomMaster_ != null) {
        if (roomMaster_ == null) {
          roomMaster_ = new global::Msg.PlayerBaseInfo();
        }
        RoomMaster.MergeFrom(other.RoomMaster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 16: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 24: {
            MemberMaxCount = input.ReadUInt32();
            break;
          }
          case 34: {
            if (roomMaster_ == null) {
              roomMaster_ = new global::Msg.PlayerBaseInfo();
            }
            input.ReadMessage(roomMaster_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求房间
  /// </summary>
  public sealed partial class RoomListReq : pb::IMessage<RoomListReq> {
    private static readonly pb::MessageParser<RoomListReq> _parser = new pb::MessageParser<RoomListReq>(() => new RoomListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListReq(RoomListReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListReq Clone() {
      return new RoomListReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求房间列表
  /// </summary>
  public sealed partial class RoomListRsp : pb::IMessage<RoomListRsp> {
    private static readonly pb::MessageParser<RoomListRsp> _parser = new pb::MessageParser<RoomListRsp>(() => new RoomListRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRsp(RoomListRsp other) : this() {
      rooms_ = other.rooms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRsp Clone() {
      return new RoomListRsp(this);
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.RoomData> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.RoomData.Parser);
    private readonly pbc::RepeatedField<global::Msg.RoomData> rooms_ = new pbc::RepeatedField<global::Msg.RoomData>();
    /// <summary>
    ///房间列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.RoomData> Rooms {
      get { return rooms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rooms_.Equals(other.rooms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rooms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rooms_.WriteTo(output, _repeated_rooms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListRsp other) {
      if (other == null) {
        return;
      }
      rooms_.Add(other.rooms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求加入房间
  /// </summary>
  public sealed partial class JoinRoomReq : pb::IMessage<JoinRoomReq> {
    private static readonly pb::MessageParser<JoinRoomReq> _parser = new pb::MessageParser<JoinRoomReq>(() => new JoinRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq(JoinRoomReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq Clone() {
      return new JoinRoomReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求加入房间
  /// </summary>
  public sealed partial class JoinRoomRsp : pb::IMessage<JoinRoomRsp> {
    private static readonly pb::MessageParser<JoinRoomRsp> _parser = new pb::MessageParser<JoinRoomRsp>(() => new JoinRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp(JoinRoomRsp other) : this() {
      RspHead = other.rspHead_ != null ? other.RspHead.Clone() : null;
      player_ = other.player_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp Clone() {
      return new JoinRoomRsp(this);
    }

    /// <summary>Field number for the "rspHead" field.</summary>
    public const int RspHeadFieldNumber = 1;
    private global::Msg.RspHead rspHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RspHead RspHead {
      get { return rspHead_; }
      set {
        rspHead_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.PlayerBaseInfo> _repeated_player_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.PlayerBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.PlayerBaseInfo> player_ = new pbc::RepeatedField<global::Msg.PlayerBaseInfo>();
    /// <summary>
    ///玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.PlayerBaseInfo> Player {
      get { return player_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RspHead, other.RspHead)) return false;
      if(!player_.Equals(other.player_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rspHead_ != null) hash ^= RspHead.GetHashCode();
      hash ^= player_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rspHead_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RspHead);
      }
      player_.WriteTo(output, _repeated_player_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rspHead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RspHead);
      }
      size += player_.CalculateSize(_repeated_player_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.rspHead_ != null) {
        if (rspHead_ == null) {
          rspHead_ = new global::Msg.RspHead();
        }
        RspHead.MergeFrom(other.RspHead);
      }
      player_.Add(other.player_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rspHead_ == null) {
              rspHead_ = new global::Msg.RspHead();
            }
            input.ReadMessage(rspHead_);
            break;
          }
          case 18: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求离开房间
  /// </summary>
  public sealed partial class LeaveRoomReq : pb::IMessage<LeaveRoomReq> {
    private static readonly pb::MessageParser<LeaveRoomReq> _parser = new pb::MessageParser<LeaveRoomReq>(() => new LeaveRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq(LeaveRoomReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq Clone() {
      return new LeaveRoomReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class LeaveRoomRsp : pb::IMessage<LeaveRoomRsp> {
    private static readonly pb::MessageParser<LeaveRoomRsp> _parser = new pb::MessageParser<LeaveRoomRsp>(() => new LeaveRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp(LeaveRoomRsp other) : this() {
      RspHead = other.rspHead_ != null ? other.RspHead.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp Clone() {
      return new LeaveRoomRsp(this);
    }

    /// <summary>Field number for the "rspHead" field.</summary>
    public const int RspHeadFieldNumber = 1;
    private global::Msg.RspHead rspHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RspHead RspHead {
      get { return rspHead_; }
      set {
        rspHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RspHead, other.RspHead)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rspHead_ != null) hash ^= RspHead.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rspHead_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rspHead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RspHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.rspHead_ != null) {
        if (rspHead_ == null) {
          rspHead_ = new global::Msg.RspHead();
        }
        RspHead.MergeFrom(other.RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rspHead_ == null) {
              rspHead_ = new global::Msg.RspHead();
            }
            input.ReadMessage(rspHead_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家进入房间
  /// </summary>
  public sealed partial class RoomPlayerJoinNtf : pb::IMessage<RoomPlayerJoinNtf> {
    private static readonly pb::MessageParser<RoomPlayerJoinNtf> _parser = new pb::MessageParser<RoomPlayerJoinNtf>(() => new RoomPlayerJoinNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerJoinNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerJoinNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerJoinNtf(RoomPlayerJoinNtf other) : this() {
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerJoinNtf Clone() {
      return new RoomPlayerJoinNtf(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Msg.PlayerBaseInfo player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.PlayerBaseInfo Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerJoinNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerJoinNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerJoinNtf other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Msg.PlayerBaseInfo();
        }
        Player.MergeFrom(other.Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::Msg.PlayerBaseInfo();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家离开房间
  /// </summary>
  public sealed partial class RoomPlayerLeaveNtf : pb::IMessage<RoomPlayerLeaveNtf> {
    private static readonly pb::MessageParser<RoomPlayerLeaveNtf> _parser = new pb::MessageParser<RoomPlayerLeaveNtf>(() => new RoomPlayerLeaveNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerLeaveNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerLeaveNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerLeaveNtf(RoomPlayerLeaveNtf other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerLeaveNtf Clone() {
      return new RoomPlayerLeaveNtf(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerLeaveNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerLeaveNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerLeaveNtf other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求战斗准备
  /// </summary>
  public sealed partial class RoomBattleReadyReq : pb::IMessage<RoomBattleReadyReq> {
    private static readonly pb::MessageParser<RoomBattleReadyReq> _parser = new pb::MessageParser<RoomBattleReadyReq>(() => new RoomBattleReadyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleReadyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleReadyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleReadyReq(RoomBattleReadyReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleReadyReq Clone() {
      return new RoomBattleReadyReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleReadyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleReadyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleReadyReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RoomBattleReadyRsp : pb::IMessage<RoomBattleReadyRsp> {
    private static readonly pb::MessageParser<RoomBattleReadyRsp> _parser = new pb::MessageParser<RoomBattleReadyRsp>(() => new RoomBattleReadyRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleReadyRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleReadyRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleReadyRsp(RoomBattleReadyRsp other) : this() {
      RspHead = other.rspHead_ != null ? other.RspHead.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleReadyRsp Clone() {
      return new RoomBattleReadyRsp(this);
    }

    /// <summary>Field number for the "rspHead" field.</summary>
    public const int RspHeadFieldNumber = 1;
    private global::Msg.RspHead rspHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RspHead RspHead {
      get { return rspHead_; }
      set {
        rspHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleReadyRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleReadyRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RspHead, other.RspHead)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rspHead_ != null) hash ^= RspHead.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rspHead_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rspHead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RspHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleReadyRsp other) {
      if (other == null) {
        return;
      }
      if (other.rspHead_ != null) {
        if (rspHead_ == null) {
          rspHead_ = new global::Msg.RspHead();
        }
        RspHead.MergeFrom(other.RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rspHead_ == null) {
              rspHead_ = new global::Msg.RspHead();
            }
            input.ReadMessage(rspHead_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗准备推送
  /// </summary>
  public sealed partial class RoomBattleReadyNtf : pb::IMessage<RoomBattleReadyNtf> {
    private static readonly pb::MessageParser<RoomBattleReadyNtf> _parser = new pb::MessageParser<RoomBattleReadyNtf>(() => new RoomBattleReadyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleReadyNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleReadyNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleReadyNtf(RoomBattleReadyNtf other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleReadyNtf Clone() {
      return new RoomBattleReadyNtf(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleReadyNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleReadyNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleReadyNtf other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗取消准备
  /// </summary>
  public sealed partial class RoomBattleCancleReadyReq : pb::IMessage<RoomBattleCancleReadyReq> {
    private static readonly pb::MessageParser<RoomBattleCancleReadyReq> _parser = new pb::MessageParser<RoomBattleCancleReadyReq>(() => new RoomBattleCancleReadyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleCancleReadyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleCancleReadyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleCancleReadyReq(RoomBattleCancleReadyReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleCancleReadyReq Clone() {
      return new RoomBattleCancleReadyReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleCancleReadyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleCancleReadyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleCancleReadyReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RoomBattleCancleReadyRsp : pb::IMessage<RoomBattleCancleReadyRsp> {
    private static readonly pb::MessageParser<RoomBattleCancleReadyRsp> _parser = new pb::MessageParser<RoomBattleCancleReadyRsp>(() => new RoomBattleCancleReadyRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleCancleReadyRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleCancleReadyRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleCancleReadyRsp(RoomBattleCancleReadyRsp other) : this() {
      RspHead = other.rspHead_ != null ? other.RspHead.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleCancleReadyRsp Clone() {
      return new RoomBattleCancleReadyRsp(this);
    }

    /// <summary>Field number for the "rspHead" field.</summary>
    public const int RspHeadFieldNumber = 1;
    private global::Msg.RspHead rspHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RspHead RspHead {
      get { return rspHead_; }
      set {
        rspHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleCancleReadyRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleCancleReadyRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RspHead, other.RspHead)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rspHead_ != null) hash ^= RspHead.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rspHead_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rspHead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RspHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleCancleReadyRsp other) {
      if (other == null) {
        return;
      }
      if (other.rspHead_ != null) {
        if (rspHead_ == null) {
          rspHead_ = new global::Msg.RspHead();
        }
        RspHead.MergeFrom(other.RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rspHead_ == null) {
              rspHead_ = new global::Msg.RspHead();
            }
            input.ReadMessage(rspHead_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///取消战斗
  /// </summary>
  public sealed partial class RoomBattleCancleReadyNtf : pb::IMessage<RoomBattleCancleReadyNtf> {
    private static readonly pb::MessageParser<RoomBattleCancleReadyNtf> _parser = new pb::MessageParser<RoomBattleCancleReadyNtf>(() => new RoomBattleCancleReadyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleCancleReadyNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleCancleReadyNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleCancleReadyNtf(RoomBattleCancleReadyNtf other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleCancleReadyNtf Clone() {
      return new RoomBattleCancleReadyNtf(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleCancleReadyNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleCancleReadyNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleCancleReadyNtf other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗准备
  /// </summary>
  public sealed partial class RoomBattleStartReq : pb::IMessage<RoomBattleStartReq> {
    private static readonly pb::MessageParser<RoomBattleStartReq> _parser = new pb::MessageParser<RoomBattleStartReq>(() => new RoomBattleStartReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleStartReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStartReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStartReq(RoomBattleStartReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStartReq Clone() {
      return new RoomBattleStartReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleStartReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleStartReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleStartReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RoomBattleStartRsp : pb::IMessage<RoomBattleStartRsp> {
    private static readonly pb::MessageParser<RoomBattleStartRsp> _parser = new pb::MessageParser<RoomBattleStartRsp>(() => new RoomBattleStartRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleStartRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStartRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStartRsp(RoomBattleStartRsp other) : this() {
      RspHead = other.rspHead_ != null ? other.RspHead.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStartRsp Clone() {
      return new RoomBattleStartRsp(this);
    }

    /// <summary>Field number for the "rspHead" field.</summary>
    public const int RspHeadFieldNumber = 1;
    private global::Msg.RspHead rspHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RspHead RspHead {
      get { return rspHead_; }
      set {
        rspHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleStartRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleStartRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RspHead, other.RspHead)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rspHead_ != null) hash ^= RspHead.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rspHead_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rspHead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RspHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleStartRsp other) {
      if (other == null) {
        return;
      }
      if (other.rspHead_ != null) {
        if (rspHead_ == null) {
          rspHead_ = new global::Msg.RspHead();
        }
        RspHead.MergeFrom(other.RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rspHead_ == null) {
              rspHead_ = new global::Msg.RspHead();
            }
            input.ReadMessage(rspHead_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomBattleStartNtf : pb::IMessage<RoomBattleStartNtf> {
    private static readonly pb::MessageParser<RoomBattleStartNtf> _parser = new pb::MessageParser<RoomBattleStartNtf>(() => new RoomBattleStartNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleStartNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.RoomReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStartNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStartNtf(RoomBattleStartNtf other) : this() {
      RspHead = other.rspHead_ != null ? other.RspHead.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStartNtf Clone() {
      return new RoomBattleStartNtf(this);
    }

    /// <summary>Field number for the "rspHead" field.</summary>
    public const int RspHeadFieldNumber = 1;
    private global::Msg.RspHead rspHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RspHead RspHead {
      get { return rspHead_; }
      set {
        rspHead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleStartNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleStartNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RspHead, other.RspHead)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rspHead_ != null) hash ^= RspHead.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rspHead_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rspHead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RspHead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleStartNtf other) {
      if (other == null) {
        return;
      }
      if (other.rspHead_ != null) {
        if (rspHead_ == null) {
          rspHead_ = new global::Msg.RspHead();
        }
        RspHead.MergeFrom(other.RspHead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rspHead_ == null) {
              rspHead_ = new global::Msg.RspHead();
            }
            input.ReadMessage(rspHead_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
